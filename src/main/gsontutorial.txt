public static class Car {
		public String brand = null; //putting transient after 'public' will make the Gson ignore it during serialization and deserialization
		public int doors = 0;
	}

	public static class CarCreator implements InstanceCreator<Car> {
		public Car createInstance(Type type){
			Car car = new Car();
			car.brand = "Toyota";
			return car;
		}
	}

    public static void main (String[] args) {
		//Gson gson = new Gson();  creating a Gson object
		//GsonBuilder builder = new GsonBuilder(); another way of creating a Gson object
		//Gson gson = builder.create();

		String json = "{\"brand\":\"Jeep\", \"doors\": 3}";
		Gson gson = new Gson();
		Car car = gson.fromJson(json, Car.class); //converting from JSON string to an object

		Car car2 = new Car();
		car2.brand = "Rover";
		car2.doors = 5;
		Gson gson2 = new GsonBuilder().setPrettyPrinting().create();
		String json2 = gson.toJson(car2);
		System.out.println(json2);


		//GSON instance creator -- object factory
		//useful for us to create multiple scenes?
		GsonBuilder gsonBuilder = new GsonBuilder();
		gsonBuilder.registerTypeAdapter(Car.class, new CarCreator());
		Gson gson3 = gsonBuilder.create();
		String carJson = "{\"doors\" : 4";
		Car car3 = gson3.fromJson(carJson, Car.class);
		System.out.println(car3.brand);
	}
